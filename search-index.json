[{"title":"CTF中常见提权(一)","date":"2025-10-05T07:58:02.396Z","url":"/2025/10/05/%E6%8F%90%E6%9D%83%EF%BC%88%E4%B8%80%EF%BC%89/","categories":[["undefined",""]],"content":"CTF中常见提权(一)一.udf提权1.一句话：由于db的错误配置导致错误设置了数据库有较高的所有权，进而导致提权2.利用条件：sql错误配置()，可以连接数据库执行语句3.平台关键文件：windows:udf.dlllinux:udf.so 4.大致流程上马后发现有敏感文件由root创建-&gt;尝试读取无效-&gt;已知数据库类型连接方式查看&#x2F;etc&#x2F;passwd-&gt;看用户-&gt;用SFTP或蚁剑上传文件-&gt;使用show variables like &quot;%plugin%&quot;;查看插件目录-&gt;使用sqlmap对udf64.so&#x2F;udf32.so（或dll）进行解密 或者可以利用马子上传直接写文件：64位linux： 32位linux： 如何获取只要从github上找相关的就行了，sqlmap需见第一条。上传后请确保将文件复制到show variables like %plugins%;输出的结果路径中。 二.suid提权1.一句话：SUID（Set User ID）是一种特殊的文件权限，允许用户以文件所有者的权限执行文件。如果配置不当，可能被用于权限提升2.SUID 权限基础查看 SUID 文件 SUID 权限表示 常见的 SUID 利用方式 已知 SUID 二进制文件利用find 命令 如果 bash 有 SUID 利用系统命令通过 cp 覆盖文件 创建恶意备份 手动创建 SUID Shell方法 1：使用 cp（如果有 SUID cp） 方法 2：使用 find 执行 方法 3：使用脚本语言 Perl 3.高级利用技术 共享库劫持 (2)编译 (3)设置 LD_PRELOAD 环境变量利用 符号链接攻击 10.防御措施 解题： [UUCTF 2022 新生赛]uploadandinject题目： 脚本： 编译： CTFshow 654见"},{"title":"n1-ctf-赛后复现","date":"2025-10-05T06:31:27.868Z","url":"/2025/10/05/n1-ctf/","categories":[["undefined",""]],"content":"online_unzipper(100%)1.打软连接┌──(swordreforge㉿swordreforge)-[]└─$ ln &#x2F;etc&#x2F;passwd test┌──(swordreforge㉿swordreforge)-[]└─$ zip –symlinks test.zip passwd 正常上传，下载这样就会下载到文件了 改一下session┌──(swordreforge㉿swordreforge)-[~]└─$ flask-unsign –sign –cookie “{‘role’: ‘admin’, ‘username’: ‘admin’}” –secret “ #mu0cw9F#7bBCoF! “eyJyb2xlIjoiYWRtaW4iLCJ1c2VybmFtZSI6ImFkbWluIn0.aMUxug.GBoGLOiK_gczxw0482xAgoacOBo 2.命令注入用不了,按理说参数可控，可以多行命令执行的但为何无文件有了;`cat &#x2F;f* &gt; &#x2F;app&#x2F;uploads&#x2F;4&#x2F;4.txt`;flag{a3c268c2-ad5d-4117-a195-e0dfed1fd3ec} unfinished(60%)1.赛时思路使用了httponly&#x3D;True-&gt;不可使用cookie带出（根据赛后复现该项为httpOlny&#x3D;True会造成非预期），flag在cookie中-&gt;多半是xss or csrf这样就易于想到： 大致思路：填充路径-&gt;&#x2F;profile机器访问路径 -&gt;&#x2F;api&#x2F;bio&#x2F;你登陆的用户名（注：本地可访问&#x2F;触发xss）ban了但没全ban触发机器路径-&gt;&#x2F;view逻辑验证：为了更方便查看，修改了有关无头浏览器的代码： xss:&#x2F;api&#x2F;bio&#x2F;a&#x2F;profile&#x2F;view日志如下： 所以我们要在服务器上开一个日志服务器，用于接收详细的请求信息： 以上为理论，具体复现后续再做 2.赛后复现1.大致思路同上2.不同点 ping（100%）1.赛时思考感觉是绕waf 赛后复现在python base64解码时，会出现解码不一致情况，这是因为最后的&#x3D;&#x3D;会是为视为编码的结束点,而终端会直接解码从而造成命令执行 因此： Peek a Fork(30%)没搞懂，socket在干啥？？十分的pwn dd if&#x3D;&#x2F;proc&#x2F;510400&#x2F;mem bs&#x3D;1 skip&#x3D;$((0x7fef25dd1000)) count&#x3D;4096 2&gt;&#x2F;dev&#x2F;null | stringsflag{test_flag}"},{"title":"白盒代码审计工具—CodeQL安装教程【Liunx】","date":"2025-10-04T15:59:00.812Z","url":"/2025/10/04/codeql%E4%BD%BF%E7%94%A8%E8%BD%AC%E8%BD%BD/","categories":[["undefined",""]],"content":"codeql简介codeql是一个将代码转化成类似数据库的形式，并基于该database进行分析的引擎。在 CodeQL 中，代码被视为数据。安全漏洞、Bug 和其他错误被建模为可针对从代码中提取的数据库执行的查询CodeQL安装 准备工具：（Xshell Xftp）个人习惯 Linux系统环境 Codeql-Linux文件 安装网站：选择：codeql-linux64.zip文件 点击下载linux上的Codeql的安装 进入Linux切换root用户并切换到根目录下 su rootcd &#x2F;opt 进入根目录下后 创建codeql-cli文件夹 sudo mkdir -p &#x2F;opt&#x2F;codeql-cli 使用Xftp(个人喜好也可以用别的方式传进去就ok了)传入刚才下载好的Codeql-linux64.zip文件到codeqlProject目录 传入的codeql进行解压操作 解压好后配置环境变量(暂时) 遇到问题： 创建 CodeQL 数据库 执行以下命令 必须指定以下内容： CodeQL CLI 分析数据库 命令为： 解释: 通过指定套件来进行查询 解释： 这里我把规则已经下载到了对应的目录，自己需要根据自己的目录来使用"},{"title":"开始的开始","date":"2025-10-04T15:39:37.124Z","url":"/2025/10/04/hello-world/","categories":[["undefined",""]],"content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post More info: Writing Run server More info: Server Generate static files More info: Generating Deploy to remote sites More info: Deployment"},{"title":"朋友们","date":"2025-10-04T15:34:38.000Z","url":"/linklist-example/index.html","categories":[["undefined",""]],"content":"webC3👨‍💼wuk0ngasal1n miscpwncryptootherlinkexample-linkstackoverflowpython-offical-document-link"}]